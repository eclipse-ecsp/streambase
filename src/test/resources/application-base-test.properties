pre.processors=org.eclipse.ecsp.analytics.stream.base.processors.TaskContextInitializer,org.eclipse.ecsp.analytics.stream.base.processors.ProtocolTranslatorPreProcessor,org.eclipse.ecsp.analytics.stream.base.processors.DeviceMessagingAgentPreProcessor
#the sinker node will always be the last processor in the chain
#Forexample: post.processors=org.eclipse.ecsp.analytics.stream.base.processors.DeviceMessagingAgent,org.eclipse.ecsp.analytics.stream.base.processors.ProtocolTranslatorPostProcessor
#In the above the last processor is ProtocolTranslatorPostProcessor, process will be the sinker for all of the sink topics
post.processors=org.eclipse.ecsp.analytics.stream.base.processors.SchedulerAgentPostProcessor,org.eclipse.ecsp.analytics.stream.base.processors.DeviceMessagingAgentPostProcessor,org.eclipse.ecsp.analytics.stream.base.processors.ProtocolTranslatorPostProcessor
launcher.impl.class.fqn=org.eclipse.ecsp.analytics.stream.base.KafkaStreamsLauncher
#How the processors will be discovered.  (SPIDiscovery, Property based discovery etc)
discovery.impl.class.fqn=org.eclipse.ecsp.analytics.stream.base.discovery.PropBasedDiscoveryServiceImpl
source.topic.name=raw-events
launcher.impl.class.fqn=org.eclipse.ecsp.analytics.stream.base.KafkaStreamsLauncher
shutdown.hook.wait.ms=180000
log.counts=false
application.id=sample
kafka.ssl.enable=false
kafka.rebalance.time.mins=10
kafka.close.timeout.secs=10
kafka.client.keystore=keystore.jks
kafka.client.keystore.password=****
kafka.client.key.password=***
kafka.client.truststore=truststore.jks
kafka.client.truststore.password=****
kafka.ssl.client.auth=true
kafka.consumer.topic=testtopic
kafka.consumer.poll=10
kafka.partitioner=org.eclipse.ecsp.analytics.stream.base.dao.impl.MockKafkaPartitioner
kafka.device.events.sync.puts=true
exec.shutdown.hook=false
#Replication factor for change log
replication.factor=2
mongodb.hosts=localhost
mongodb.port=27017
mongodb.username=dummyUser
mongodb.password=dummyPass
mongodb.auth.db=admin
mongodb.name=admin
mongodb.pool.max.size=200
mongodb.max.wait.time.ms=60000
mongodb.connection.timeout.ms=60000
mongodb.socket.timeout.ms=60000
mongodb.max.connections.per.host=200
mongodb.block.threads.allowed.multiplier=10
mongodb.read.preference=secondaryPreferred
morphia.map.packages=org.eclipse.ecsp.dao
mongodb.server.selection.timeout=30000
mongodb.taggable.read.preference.enabled=false
mongodb.read.preference.tag=primary_region
device.messaging.event.transformer.class=org.eclipse.ecsp.transform.DeviceMessageIgniteEventTransformer
mqtt.broker.url=tcp://127.0.0.1:1883
mqtt.topic.separator=/
mqtt.config.qos=1
mqtt.user.name=dummyUser
mqtt.user.password=dummyPass
mqtt.topic.to.device.infix=/2d
mqtt.service.topic.name=test
mqtt.conn.retry.count=3
mqtt.conn.retry.interval=1000
messageid.generator.type=org.eclipse.ecsp.analytics.stream.base.idgen.internal.GlobalMessageIdGenerator
event.transformer.classes=genericIgniteEventTransformer
ignite.key.transformer.class=org.eclipse.ecsp.transform.IgniteKeyTransformerStringImpl
dma.event.header.updation.type=messageId
dma.service.max.retry=3
dma.service.retry.interval.millis=60000
dma.service.retry.min.threshold.millis=10000
shoulder.tap.max.retry=3
shoulder.tap.retry.interval.millis=60000
shoulder.tap.retry.min.threshold.millis=10000
dma.auto.offset.reset=latest
#Shoulder tap invoker implementation class.
#Possible values:
#1) Default, Dummy (no invocation) Impl - org.eclipse.ecsp.stream.dma.shouldertap.DummyShoulderTapInvokerImpl
#2) WAM API endpoint - org.eclipse.ecsp.stream.dma.shouldertap.ShoulderTapInvokerWAMImpl
#3) Vehicle Notification service - org.eclipse.ecsp.stream.dma.shouldertap.ShoulderTapInvokerVehicleNotificationImpl
dma.shoulder.tap.invoker.impl.class=org.eclipse.ecsp.stream.dma.shouldertap.DummyShoulderTapInvokerImpl
dma.shoulder.tap.invoker.wam.url=http://wamserver/api
redis.address=127.0.0.1:6379
redis.sentinels=
redis.master.name=
redis.dns.monitoring.interval=5000
redis.read.mode=SLAVE
redis.subscription.mode=SLAVE
redis.subscription.conn.min.idle.size=1
redis.subscription.conn.pool.size=50
redis.slave.conn.min.idle.size=32
redis.slave.pool.size=64
redis.master.conn.min.idle.size=32
redis.master.conn.pool.size=64
redis.idle.conn.timeout=10000
redis.conn.timeout=10000
redis.timeout=3000
redis.retry.attempts=3
redis.retry.interval=1500
redis.reconnection.timeout=3000
redis.failed.attempts=3
redis.database=0
redis.password=
redis.subscriptions.per.conn=5
redis.client.name=yellow
redis.conn.min.idle.size=32
redis.conn.pool.size=64
redis.cluster.masters=
redis.scan.interval=10000
redis.netty.threads=0
redis.decode.in.executor=true
#IgniteCache Lua script scan limit
redis.scan.limit=1000
#IgniteCache Lua script for Regex scan
redis.regex.scan.filename=scanregex.txt
#IgniteCache Async operation batch pipeline size
redis.pipeline.size=2
#VehicleId to DeviceId mapping impl class
device.to.vehicle.mapper.impl=org.eclipse.ecsp.analytics.stream.d2v.VehicleToDeviceSingleIdentityMapper
#Vehicle Profile Service URL
http.vp.url=http://internal-andromeda-vehicle-profile-1184319113.us-east-1.elb.amazonaws.com/v1.0/vehicleProfiles/
// Http client properties
http.connection.timeout.in.sec=120
http.read.timeout.in.sec=10
http.write.timeout.in.sec=10
http.keep.alive.duration.in.sec=120
http.max.idle.connections=20
http.vp.auth.header=Authentication
http.vp.service.user=test
http.vp.service.password=pass
// Vehicle profile service URL
http.vp.retry.interval.in.millis=5000
http.vp.max.retry.count=3
#Scheduler Agent Stream Processor
scheduler.agent.topic.name=scheduler
start.device.status.consumer=true
prometheus.agent.port=9100
metrics.prometheus.enabled=false
prometheus.histogram.buckets=0.005, 0.010, 0.015, 0.020, 0.025, 0.030, 0.080, 0.1, 0.2, 0.3
messageid.generator.type=org.eclipse.ecsp.analytics.stream.base.idgen.internal.GlobalMessageIdGenerator
#Health framework properties
health.mqtt.monitor.enabled=false
health.mqtt.monitor.restart.on.failure=true
health.mongo.monitor.enabled=false
health.mongo.needs.restart.on.failure=true
health.kafka.consumer.group.monitor.enabled=false
health.kafka.consumer.group.needs.restart.on.failure=false
health.device.status.backdoor.monitor.enabled=false
health.device.status.backdoor.monitor.restart.on.failure=false
health.kafka.topics.monitor.enabled=false
health.kafka.topics.monitor.needs.restart.on.failure=true
health.redis.monitor.enabled=false
health.redis.needs.restart.on.failure=true
ignore.bootstrap.failure.monitors=KAFKA_CONSUMER_GROUP_HEALTH_MONITOR,DEVICE_STATUS_BACKDOOR_HEALTH_MONITOR
sp.restart.on.failure=false
sp.restart.wait.time.in.millis=10000
kafka.topics.file.path=/data/topics.txt
expected.min.isr=1
health.service.failure.retry.thrshold=20
health.service.failure.retry.interval.millis=500
health.service.retry.interval.millis=100
health.service.executor.shutdown.millis=2000
health.service.executor.initial.delay=120000
#CacheBypass queue's capacity
cache.bypass.queue.capacity=100000
cache.bypass.thread.initial.delay=0
cache.bypass.thread.delay=60000
cache.bypass.thread.shutdown.wait.time=2000
print.threads.metadata.enabled=false
print.threads.metadata.interval.ms=30000
stream.threads.active.states=CREATED,STARTING,PARTITIONS_REVOKED,PARTITIONS_ASSIGNED,RUNNING,PENDING_SHUTDOWN
stream.threads.dead.states=DEAD
#Enabling DMA/SCHEDULER Module Configurations For StreamBase
dma.enabled=false
scheduler.enabled=false
#Name of the class which is implementing IgnitePlatform interface to provide platformID
ignite.platform.service.impl.class.name=

mqtt.topic.name.generator.impl.class.name=org.eclipse.ecsp.analytics.stream.base.utils.DefaultMqttTopicNameGeneratorImpl
'
